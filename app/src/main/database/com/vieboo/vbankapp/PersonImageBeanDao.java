package com.vieboo.vbankapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vieboo.vbankapp.data.PersonImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_IMAGE_BEAN".
*/
public class PersonImageBeanDao extends AbstractDao<PersonImageBean, Long> {

    public static final String TABLENAME = "PERSON_IMAGE_BEAN";

    /**
     * Properties of entity PersonImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonId = new Property(1, String.class, "personId", false, "PERSON_ID");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property PadFeature = new Property(4, String.class, "padFeature", false, "PAD_FEATURE");
        public final static Property DataVersion = new Property(5, long.class, "dataVersion", false, "DATA_VERSION");
        public final static Property FeatState = new Property(6, Integer.class, "featState", false, "FEAT_STATE");
    }


    public PersonImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PersonImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_IMAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PERSON_ID\" TEXT," + // 1: personId
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"TYPE\" TEXT," + // 3: type
                "\"PAD_FEATURE\" TEXT," + // 4: padFeature
                "\"DATA_VERSION\" INTEGER NOT NULL ," + // 5: dataVersion
                "\"FEAT_STATE\" INTEGER);"); // 6: featState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonImageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String padFeature = entity.getPadFeature();
        if (padFeature != null) {
            stmt.bindString(5, padFeature);
        }
        stmt.bindLong(6, entity.getDataVersion());
 
        Integer featState = entity.getFeatState();
        if (featState != null) {
            stmt.bindLong(7, featState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonImageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(2, personId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String padFeature = entity.getPadFeature();
        if (padFeature != null) {
            stmt.bindString(5, padFeature);
        }
        stmt.bindLong(6, entity.getDataVersion());
 
        Integer featState = entity.getFeatState();
        if (featState != null) {
            stmt.bindLong(7, featState);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonImageBean readEntity(Cursor cursor, int offset) {
        PersonImageBean entity = new PersonImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // padFeature
            cursor.getLong(offset + 5), // dataVersion
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // featState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonImageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPadFeature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDataVersion(cursor.getLong(offset + 5));
        entity.setFeatState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonImageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonImageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
